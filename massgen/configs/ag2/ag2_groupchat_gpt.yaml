# Example configuration for using AG2 GroupChat with MassGen
# The entire GroupChat acts as a single agent in MassGen's orchestration
 # uv run python -m massgen.cli --config ag2/ag2_groupchat_gpt.yaml "Write a Python function to calculate factorial."
agents:
  - id: "gpt-5-nano"
    system_message: "You are an expert programmer who writes clean, efficient code."
    backend:
      type: "openai"
      model: "gpt-5-nano"
      text:
        verbosity: "medium"
      reasoning:
        effort: "medium"

  - id: "ag2_team"
    backend:
      type: ag2
      group_config:
        # Default llm_config for all agents (REQUIRED)
        # Individual agents can override this if needed
        llm_config:
            api_type: "openai"
            model: "gpt-4o"

        agents:
          - type: assistant
            name: "Coder"
            system_message: "You are an expert programmer who writes clean, efficient code."
            # Uses default llm_config from group_config

          - type: assistant
            name: "Reviewer"
            system_message: |
              You are a code reviewer who provides constructive feedback. You role is to:
                1. Review the code for correctness, efficiency, and style
                2. Suggest improvements and optimizations
                3. DO NOT write complete to address original request
                4. DO NOT write test code
#                5. When you think the code is good enough to submit, say "LGTM" (Looks Good To Me)
            # Override with different model
            llm_config:
                api_type: "google"
                model: "gemini-2.5-flash"

          - type: assistant
            name: "Tester"
            system_message: |
              You are a QA engineer. Your role is to:
              1. Write test code in Python that validates the provided function
              2. Test edge cases (empty input, negative numbers, large values, etc.)
              3. Execute the tests using code blocks
              4. Report results and any failures

              IMPORTANT: Always write executable Python code in markdown code blocks like:
              ```python
              # your test code here
              ```

              Do NOT just repeat the function code. Write NEW test code that calls the function.
            llm_config:
                api_type: "google"
                model: "gemini-2.5-flash"
            code_execution_config:
              executor:
                type: "LocalCommandLineCodeExecutor"
                timeout: 60
                work_dir: "./code_execution_workspace"

        # Pattern configuration (REQUIRED)
        pattern:
          type: "auto"  # Supported: "auto", "round_robin"
          initial_agent: "Coder"  # Required for "auto" pattern
          group_manager_args:
            # Optional: override llm_config for group manager
            # If not provided, uses default from group_config
            llm_config:
                api_type: "google"
                model: "gemini-2.5-flash"
        max_rounds: 2

#  # Optional: Mix with native MassGen agents
#  - id: "claude_architect"
#    backend:
#      type: claude
#      model: claude-3-opus-20240229
#      temperature: 0.7
#      system_message: "You are a software architect who designs scalable systems."

orchestrator:
  rounds: 3
  parallel: true

# UI Configuration
ui:
  type: "rich_terminal"
  logging_enabled: true