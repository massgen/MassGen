name: Release Documentation Automation

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v0.0.29

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "📦 Processing release: $TAG"

      - name: Verify release documentation exists
        id: verify
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          DOCS_DIR="docs/releases/$TAG"

          echo "🔍 Checking for required documentation in $DOCS_DIR..."

          MISSING=""

          if [ ! -f "$DOCS_DIR/features-overview.md" ]; then
            echo "❌ Missing: $DOCS_DIR/features-overview.md"
            MISSING="$MISSING features-overview.md"
          else
            echo "✅ Found: features-overview.md"
          fi

          if [ ! -f "$DOCS_DIR/release-notes.md" ]; then
            echo "❌ Missing: $DOCS_DIR/release-notes.md"
            MISSING="$MISSING release-notes.md"
          else
            echo "✅ Found: release-notes.md"
          fi

          if [ -n "$MISSING" ]; then
            echo "❌ Release documentation incomplete!"
            echo "Missing files:$MISSING"
            echo "Please create the required documentation before tagging:"
            echo "  - $DOCS_DIR/features-overview.md (~100-150 lines)"
            echo "  - $DOCS_DIR/release-notes.md (400+ lines)"
            exit 1
          fi

          echo "✅ All required documentation found!"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run README update script
        id: update_readme
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          echo "📝 Running update script for $TAG..."

          python scripts/update_readme_release.py "$TAG"

          if git diff --quiet README.md; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "⚠️  No changes to README.md (may already be updated)"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "✅ README.md updated successfully"
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if [ "${{ steps.update_readme.outputs.changes }}" = "false" ]; then
            echo "📌 README.md already up to date, skipping commit"
            exit 0
          fi

      - name: Configure git
        if: steps.update_readme.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create update branch and PR
        if: steps.update_readme.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          BRANCH="docs/readme-update-$TAG"

          echo "🌿 Creating branch: $BRANCH"
          git checkout -b "$BRANCH"

          echo "📝 Committing changes..."
          git add README.md
          git commit -m "docs: update README for $TAG release

          - Added What's New section for $TAG
          - Archived previous release to Previous Releases
          - Auto-generated by release-docs-automation workflow"

          echo "⬆️  Pushing branch..."
          git push origin "$BRANCH"

          echo "🔄 Creating pull request..."
          gh pr create \
            --title "📝 Update README for $TAG release" \
            --body "## Automated README Update for $TAG

          This PR was automatically generated by the release documentation automation workflow.

          ### Changes
          - ✅ Added 'What's New in $TAG' section to README.md
          - ✅ Archived previous release to 'Previous Releases' section
          - ✅ Updated links to release documentation

          ### Verification
          - Release documentation verified: ✅
            - \`docs/releases/$TAG/features-overview.md\`
            - \`docs/releases/$TAG/release-notes.md\`

          ### Next Steps
          1. Review the changes in README.md
          2. Merge this PR to complete the release process
          3. Release will be published with updated README

          ---
          🤖 Generated by: \`.github/workflows/release-docs-automation.yml\`" \
            --base main \
            --head "$BRANCH" \
            --label "documentation" \
            --label "automated"

          echo "✅ Pull request created!"

      - name: Summary
        if: always()
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          echo "## 📋 Release Documentation Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** $TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.verify.outcome }}" = "success" ]; then
            echo "✅ Documentation verification: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "  - features-overview.md found" >> $GITHUB_STEP_SUMMARY
            echo "  - release-notes.md found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation verification: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "  - See job logs for missing files" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.update_readme.outputs.changes }}" = "true" ]; then
            echo "✅ README update: **COMPLETED**" >> $GITHUB_STEP_SUMMARY
            echo "  - Pull request created for review" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.update_readme.outputs.changes }}" = "false" ]; then
            echo "ℹ️ README update: **SKIPPED** (already up to date)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ README update: **NOT RUN** (verification failed)" >> $GITHUB_STEP_SUMMARY
          fi
